@section styles
{

    <link rel="stylesheet" type="text/css" href="~/Content/angular-datatables.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/DataTables/dataTables.bootstrap.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/DataTables/responsive.bootstrap.css" />


    <style type="text/css">
        .table-responsive {
            overflow-x: auto;
        }

        #NewElementModal .alert {
            padding: 5px;
            margin-bottom: 0px;
            margin-top: 5px;
        }

        input.ng-touched.ng-invalid {
            border-color: #f86c6b;
        }

        .invalid-group {
            color: #f86c6b;
        }
    </style>
}
@section scripts
{
    <script type="text/javascript" src="~/Scripts/DataTables/jquery.dataTables.js"></script>
    <script type="text/javascript" src="~/Scripts/angular-datatables.js"></script>
    <script type="text/javascript" src="~/Scripts/DataTables/dataTables.bootstrap.js"></script>
    <script type="text/javascript" src="~/Scripts/DataTables/dataTables.responsive.js"></script>
    <script type="text/javascript" src="~/Scripts/DataTables/responsive.bootstrap.js"></script>
    <script type="text/javascript">
        var INMEDIKApp = angular.module('INMEDIKApp', ["ui.bootstrap", "ui.bootstrap.tpls", "datatables"]);
        INMEDIKApp.controller('InternmentController', function ($scope, $compile, $sce, $http, DTOptionsBuilder, DTColumnBuilder) {
            var dt = this;
            dt.dtInstance = {};
            dt.Internment = {};
            dt.subbmiting = false;
            dt.FormTouchedAndInvalid = false;
            dt.errors = [];
            @* Datatables *@
            @*Recompiling so we can bind Angular directive to the DT*@
            function createdRow(row, data, dataIndex) {
                $compile(angular.element(row).contents())($scope);
            }
            @* Enumera las filas del DT *@
            function pageCount(data, type, full) {
                _cont++;
                return _cont;
            }
            function moneyFormat(data, type, full, meta) {
                if (data != undefined) {
                    var num = '$' + data.toFixed(2).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
                }
                return  num;
            }

            function internActions(data, type, full, meta) {
                return  '<div class="text-center">'+
                        '<a type="button" href="@(Url.Action("ViewInternment", "Internment"))?OrderId=' + data + '"  class="btn btn-info btn-xs col-xs-12">' +
                            '<i class="fa fa-search"></i>' +
                        '</a>';
            };
            dt.SaveElement = function () {
                dt.subbmiting = true;
                $http({
                    method: 'POST',
                    url: '@Url.Action("SaveInternment", "Internment")',
                    data: dt.Internment,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(function (res) {

                    if (res.data.success) {
                        dt.dtInstance.reloadData();
                    }
                    else if (res.data.success == undefined && res.data.indexOf("SignIn") > -1) {
                        dt.errors[0] = "La sesión ha caducado.";
                        $("#resultModal").modal('show');
                    }
                    else {
                        if (res.data.errors != undefined && res.data.errors && res.data.errors.length > 0) {
                            dt.errors = res.data.errors;
                        }
                        else {
                            dt.errors[0] = res.data.message;
                        }
                        $("#resultModal").modal('show');
                    }

                }, function errorCallback(res) {
                    console.log("error: " + res);
                }).finally(function () {
                    dt.subbmiting = false;
                });
            };
            function confirmInternment(data, type, full, meta) {
                return '<div class="text-center"><button type="button" ng-click="INMEDIKApp.ConfirmInternment(' + data + ')" class="btn btn-info btn-xs">Internar</button></div>';
            };

            dt.ConfirmInternment = function (id) {
                $http({
                    method: 'POST',
                    url: '@Url.Action("ConfirmInternment", "Internment")',
                    data: { idOrder: id },
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(function (res) {

                    if (res.data.success) {
                        dt.reDrawTable('Internamientos');
                        dt.reDrawTable('Cirugias');
                    }
                    else if (res.data.success == undefined && res.data.indexOf("SignIn") > -1) {
                        dt.errors[0] = "La sesión ha caducado.";
                        $("#resultModal").modal('show');
                    }
                    else {
                        if (res.data.errors != undefined && res.data.errors && res.data.errors.length > 0) {
                            dt.errors = res.data.errors;
                        }
                        else {
                            dt.errors[0] = res.data.message;
                        }
                        $("#resultModal").modal('show');
                    }

                }, function errorCallback(res) {
                    console.log("error: " + res);
                }).finally(function () {
                    dt.subbmiting = false;
                });
            }
            dt.dtOptions = DTOptionsBuilder.newOptions()
                .withOption("ajax", {
                    dataType: "json",
                    type: "POST",
                    url: "@Url.Action("GetInternments", "Internment")"
                })
                .withDataProp("data")
                .withPaginationType('full_numbers')
                .withOption('createdRow', createdRow)
                .withOption('serverSide', true)
                .withOption('responsive', true)
                .withOption('sDom', '<"top"l>rt<"bottom"ip><"clear">')
                .withLanguage({
                    "sEmptyTable": "No existen internamientos",
                    "sInfo": "Mostrando _START_ a _END_ de _TOTAL_ entradas",
                    "sInfoEmpty": "Mostrando de 0 a 0 de 0 entradas",
                    "sInfoFiltered": "(Filtrado de un todal de _MAX_ entradas)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ",",
                    "sLengthMenu": "Mostrando _MENU_ entradas",
                    "sLoadingRecords": "Cargando...",
                    "sProcessing": "Procesando...",
                    "sSearch": "Buscar:",
                    "sZeroRecords": "No se encontraron internamientos",
                    "oPaginate": {
                        "sFirst": "Primero",
                        "sLast": "Ultimo",
                        "sNext": "Siguiente",
                        "sPrevious": "Anterior"
                    },
                    "oAria": {
                        "sSortAscending": ": ascendiente",
                        "sSortDescending": ": descendiente"
                    }
                });
            @* Definicion de las columnas del DT *@
            dt.dtColumns = [
                DTColumnBuilder.newColumn("id").withTitle("ID").withOption("visible",false),
                DTColumnBuilder.newColumn("PatientName").withTitle("Paciente"),
                DTColumnBuilder.newColumn("sCreated").withTitle("Fecha internamiento"),
                DTColumnBuilder.newColumn("Name").withTitle("Concepto"),
                DTColumnBuilder.newColumn("MedicName").withTitle("Medico"),
                DTColumnBuilder.newColumn("Total").withTitle("Total").renderWith(moneyFormat).withClass('numericSearch'),
                DTColumnBuilder.newColumn("id").withTitle("Acciones").renderWith(internActions).withClass('notSearchable text-center').notSortable(),

            ];
            dt.InstanceCallback = function (instance) {
                // Setup - add a text input to each footer cell
                dt.dtInstance = instance;
                var id = '#' + dt.dtInstance.id;
                $(id + ' thead th').each(function () {
                    var title = $(id + ' thead th').eq($(this).index()).text();
                    if (!$(this).hasClass('notSearchable')) {
                        if ($(this).hasClass('numericSearch')) {
                            $(this).html('<input type="number" class="form-control" placeholder="' + title + '" />');
                        }
                        else {
                            $(this).html('<input type="text" class="form-control" placeholder="' + title + '" />');
                        }
                    }
                });

                var table = dt.dtInstance.DataTable;
                // Apply the search
                table.columns().every(function () {
                    var that = this;

                    $('input', this.header()).on('keyup change', function (e) {
                        e.stopPropagation()
                        if (that.search() !== this.value) {
                            that
                                .search(this.value)
                                .draw();
                        }
                    });
                    $('input', this.header()).on('click', function (e) {
                        e.stopPropagation()
                    });
                });
            };

            dt.dtOptionsSurgeries = DTOptionsBuilder.newOptions()
            .withOption("ajax", {
            dataType: "json",
            type: "POST",
            url: "@Url.Action("GetSurgeries", "Internment")"
                })
                    .withDataProp("data")
                    .withPaginationType('full_numbers')
                    .withOption('createdRow', createdRow)
                    .withOption('serverSide', true)
                    .withOption('responsive', true)
                    .withOption('sDom', '<"top"l>rt<"bottom"ip><"clear">')
                    .withLanguage({
                        "sEmptyTable": "No existen cirugías",
                        "sInfo": "Mostrando _START_ a _END_ de _TOTAL_ entradas",
                        "sInfoEmpty": "Mostrando de 0 a 0 de 0 entradas",
                        "sInfoFiltered": "(Filtrado de un todal de _MAX_ entradas)",
                        "sInfoPostFix": "",
                        "sInfoThousands": ",",
                        "sLengthMenu": "Mostrando _MENU_ entradas",
                        "sLoadingRecords": "Cargando...",
                        "sProcessing": "Procesando...",
                        "sSearch": "Buscar:",
                        "sZeroRecords": "No se encontraron cirugías",
                        "oPaginate": {
                            "sFirst": "Primero",
                            "sLast": "Ultimo",
                            "sNext": "Siguiente",
                            "sPrevious": "Anterior"
                        },
                        "oAria": {
                            "sSortAscending": ": ascendiente",
                            "sSortDescending": ": descendiente"
                        }
                    });
                @* Definicion de las columnas del DT *@
                dt.dtColumnsSurgeries = [
                    DTColumnBuilder.newColumn("id").withTitle("ID").withOption("visible",false),
                    DTColumnBuilder.newColumn("orderPackageAux.patientAux.personAux.fullName").withTitle("Paciente"),
                    DTColumnBuilder.newColumn("orderPackageAux.packageAux.name").withTitle("Concepto"),
                    DTColumnBuilder.newColumn("orderPackageAux.medic.personAux.fullName").withTitle("Medico"),
                    DTColumnBuilder.newColumn("Total").withTitle("Total").renderWith(moneyFormat).withClass('numericSearch'),
                    DTColumnBuilder.newColumn("id").withTitle("Internar").renderWith(confirmInternment).withClass('notSearchable'),

                ];
            dt.InstanceCallbackSurgeries = function (instance) {
                // Setup - add a text input to each footer cell
                dt.dtInstanceSurgeries = instance;
                var id = '#' + dt.dtInstanceSurgeries.id;
                $(id + ' thead th').each(function () {
                    var title = $(id + ' thead th').eq($(this).index()).text();
                    if (!$(this).hasClass('notSearchable')) {
                        if ($(this).hasClass('numericSearch')) {
                            $(this).html('<input type="number" class="form-control" placeholder="' + title + '" />');
                        }
                        else {
                            $(this).html('<input type="text" class="form-control" placeholder="' + title + '" />');
                        }
                    }
                });

                var tableSurgeries = dt.dtInstanceSurgeries.DataTable;
                // Apply the search
                tableSurgeries.columns().every(function () {
                    var that = this;

                    $('input', this.header()).on('keyup change', function (e) {
                        e.stopPropagation()
                        if (that.search() !== this.value) {
                            that
                                .search(this.value)
                                .draw();
                        }
                    });
                    $('input', this.header()).on('click', function (e) {
                        e.stopPropagation()
                    });
                });
            };

            dt.reDrawTable = function (ptabClicked) {
                if (ptabClicked == "Internamientos") {
                    dt.dtInstance.DataTable.draw();
                }
                else {
                    dt.dtInstanceSurgeries.DataTable.draw();
                }
            }
            function init() {

            };
            init();

        });
    </script>
}
<div class="container-fluid" ng-controller="InternmentController as INMEDIKApp">
    <div class="panel panel-default">
        <div class="panel-heading">Internamientos
            <a class="btn btn-default btn-xs pull-right" href="@Url.Action("RequestMaterial", "Internment")">Solicitud material</a></div>
        <div class="panel-body">
            <div class="col-md-12">
                <ul class="nav nav-tabs">
                    <li class="active" ng-click="INMEDIKApp.reDrawTable('Internamientos')"><a data-toggle="tab" href="#Internamientos-tab">Internamientos</a></li>
                    <li ng-click="INMEDIKApp.reDrawTable('Cirugias')"><a data-toggle="tab" href="#Cirugias-tab">Cirugías</a></li>
                </ul>
                <div class="tab-content">
                    <div id="Internamientos-tab" class="tab-pane fade in active">
                        <div class="form-horizontal">
                            <div class="table-responsive">
                                <table id="InternmentTable" datatable dt-options="INMEDIKApp.dtOptions" dt-columns="INMEDIKApp.dtColumns" dt-instance="INMEDIKApp.InstanceCallback" class="table-hover table-bordered compact"></table>
                            </div>
                        </div>
                    </div>
                    <div id="Cirugias-tab" class="tab-pane fade">
                        <div class="form-horizontal">
                            <div class="table-responsive">
                                <table id="SurgeriesTable" datatable dt-options="INMEDIKApp.dtOptionsSurgeries" dt-columns="INMEDIKApp.dtColumnsSurgeries" dt-instance="INMEDIKApp.InstanceCallbackSurgeries" class="table-hover table-bordered compact"></table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="resultModal" class="modal modal-danger fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 ng-show="INMEDIKApp.errors.length!=0" class="modal-title">Errores encontrados</h4>
                </div>
                <div class="modal-body">
                    <ul ng-show="INMEDIKApp.errors.length!=0">
                        <li ng-repeat="err in INMEDIKApp.errors">{{err}}</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
                </div>
            </div>

        </div>
    </div>
    <div id="ConfirmDelete" class="modal modal-danger fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Alerta</h4>
                </div>
                <div class="modal-body">
                    ¿Está seguro que desea borrar el registro?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" ng-click="INMEDIKApp.ConfirmDelete()" data-dismiss="modal">Borrar</button>
                </div>
            </div>

        </div>
    </div>
</div>